-- drop procedure
drop procedure if exists sm_sc.prc_linear_regression;
drop procedure if exists sm_sc.prc_logistic_regression;
drop procedure if exists sm_sc.prc_nn_prepare(bigint, int, int[], int4range[]);
drop procedure if exists sm_sc.prc_nn_prepare_p(bigint, int, int[], int4range[]);
drop procedure if exists sm_sc.prc_nn_train(bigint, float, float, boolean, float, float);
drop procedure if exists sm_sc.prc_nn_train_p(bigint, float, float, boolean, float, float, boolean);
drop procedure if exists sm_sc.prc_nn_add_sess;
drop procedure if exists sm_sc.prc_nn_add_sess_p;
drop procedure if exists sm_sc.prc_nn_del_sess;
drop procedure if exists sm_sc.prc_nn_del_sess;
drop procedure if exists sm_sc.prc_nn_release_sess;
drop procedure if exists sm_sc.prc_nn_subscribe_sess;
drop procedure if exists sm_sc.prc_add_pretrain_from_infer(bigint, varchar(32));
drop procedure if exists sm_sc.prc_add_pretrain_from_infer_p(bigint, varchar(32), char(6));
drop procedure if exists sm_sc.prc_del_infer_model(bigint);
drop procedure if exists sm_sc.prc_del_infer_model_p(bigint);
drop procedure if exists sm_sc.prc_del_pretrain_model(bigint);
drop procedure if exists sm_sc.prc_del_pretrain_model_p(bigint);
drop procedure if exists sm_sc.prc_export_infer_model(bigint, text, text);
drop procedure if exists sm_sc.prc_export_infer_model_p(bigint, text, text);
drop procedure if exists sm_sc.prc_export_pretrain_model(bigint, text, text, text, text);
drop procedure if exists sm_sc.prc_export_pretrain_model_p(bigint, text, text, text, text, text);
drop procedure if exists sm_sc.prc_import_infer_model(bigint, text, text);
drop procedure if exists sm_sc.prc_import_infer_model_p(bigint, text, text);
drop procedure if exists sm_sc.prc_import_pretrain_model(bigint, text, text, text, text);
drop procedure if exists sm_sc.prc_import_pretrain_model_p(bigint, text, text, text, text, text);
drop procedure if exists sm_sc.prc_nn_add_sess;
drop procedure if exists sm_sc.prc_nn_del_sess;
drop procedure if exists sm_sc.prc_nn_prepare;
drop procedure if exists sm_sc.prc_nn_release_sess;
drop procedure if exists sm_sc.prc_nn_subscribe_sess;
drop procedure if exists sm_sc.prc_nn_train(bigint, float, float, boolean);
drop procedure if exists sm_sc.prc_dbscan_pp(typ_arr_point[], float);
drop procedure if exists sm_sc.prc_kmeans_pp(typ_arr_point[], float);

-- drop cast 
drop cast if exists (float as sm_sc.typ_l_complex);
drop cast if exists (sm_sc.typ_l_complex as float);
drop cast if exists (decimal as sm_sc.typ_l_complex);
drop cast if exists (sm_sc.typ_l_complex as decimal);
drop cast if exists (bigint as sm_sc.typ_l_complex);
drop cast if exists (sm_sc.typ_l_complex as bigint);
drop cast if exists (int as sm_sc.typ_l_complex);
drop cast if exists (sm_sc.typ_l_complex as int);
drop cast if exists (float[] as sm_sc.__typ_array_ex);

-- drop operator
drop operator if exists + (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop operator if exists - (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop operator if exists - (none, sm_sc.typ_l_complex);
drop operator if exists * (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop operator if exists ~ (none, sm_sc.typ_l_complex);
drop operator if exists @ (none, sm_sc.typ_l_complex);
drop operator if exists / (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
  -- -- drop operator if exists / (none, sm_sc.typ_l_complex);
drop operator if exists ^ (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
  -- -- -- drop operator if exists ^ (none, sm_sc.typ_l_complex);
drop operator if exists ^! (sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop operator if exists ^! (none, sm_sc.typ_l_complex);
drop operator if exists @~ (none, sm_sc.typ_l_complex);
drop operator if exists ~@ (none, sm_sc.typ_l_complex);
drop operator if exists ~^ (none, sm_sc.typ_l_complex);
drop operator if exists ~= (sm_sc.typ_l_complex, int);
drop operator if exists ~= (none, sm_sc.typ_l_complex);
drop operator if exists ~< (sm_sc.typ_l_complex, int);
drop operator if exists ~< (none, sm_sc.typ_l_complex);
drop operator if exists ~> (sm_sc.typ_l_complex, int);
drop operator if exists ~> (none, sm_sc.typ_l_complex);
drop operator if exists >< (sm_sc.typ_l_complex, int);
drop operator if exists >< (none, sm_sc.typ_l_complex);
drop operator if exists + (anyarray, anyarray);
drop operator if exists + (anyelement, anyarray);
drop operator if exists + (anyarray, anyelement);
drop operator if exists +` (float[], float[]);
drop operator if exists +` (float, float[]);
drop operator if exists +` (float[], float);
drop operator if exists +` (decimal[], decimal[]);
drop operator if exists +` (decimal, decimal[]);
drop operator if exists +` (decimal[], decimal);
drop operator if exists +` (anyarray, anyarray);
drop operator if exists +` (anyarray, anyelement);
drop operator if exists +` (anyelement, anyarray);
drop operator if exists +` (bigint[], bigint[]);
drop operator if exists +` (bigint, bigint[]);
drop operator if exists +` (bigint[], bigint);
drop operator if exists +` (int[], int[]);
drop operator if exists +` (int, int[]);
drop operator if exists +` (int[], int);
drop operator if exists - (anyarray, anyarray);
drop operator if exists - (anyarray, anyelement);
drop operator if exists - (anyelement, anyarray);
drop operator if exists - (none, anyarray);
drop operator if exists -` (float[], float[]);
drop operator if exists -` (float[], float);
drop operator if exists -` (float, float[]);
drop operator if exists -` (none, float[]);
drop operator if exists -` (decimal[], decimal[]);
drop operator if exists -` (decimal[], decimal);
drop operator if exists -` (decimal, decimal[]);
drop operator if exists -` (none, decimal[]);
drop operator if exists -` (anyarray, anyarray);
drop operator if exists -` (anyarray, anyelement);
drop operator if exists -` (anyelement, anyarray);
drop operator if exists -` (none, anyarray);
drop operator if exists -` (bigint[], bigint[]);
drop operator if exists -` (bigint[], bigint);
drop operator if exists -` (bigint, bigint[]);
drop operator if exists -` (none, bigint[]);
drop operator if exists -` (int[], int[]);
drop operator if exists -` (int[], int);
drop operator if exists -` (int, int[]);
drop operator if exists -` (none, int[]);
drop operator if exists * (anyarray, anyarray);
drop operator if exists * (anyelement, anyarray);
drop operator if exists * (anyarray, anyelement);
drop operator if exists *` (float[], float[]);
drop operator if exists *` (float, float[]);
drop operator if exists *` (float[], float);
drop operator if exists *` (decimal[], decimal[]);
drop operator if exists *` (decimal, decimal[]);
drop operator if exists *` (decimal[], decimal);
drop operator if exists *` (anyarray, anyarray);
drop operator if exists *` (anyarray, anyelement);
drop operator if exists *` (anyelement, anyarray);
drop operator if exists *` (bigint[], bigint[]);
drop operator if exists *` (bigint, bigint[]);
drop operator if exists *` (bigint[], bigint);
drop operator if exists *` (int[], int[]);
drop operator if exists *` (int, int[]);
drop operator if exists *` (int[], int);
drop operator if exists / (anyarray, anyarray);
drop operator if exists / (anyelement, anyarray);
drop operator if exists / (anyarray, anyelement);
  -- -- -- drop operator if exists / (none, anyarray);
drop operator if exists /` (anyarray, anyarray);
drop operator if exists /` (anyarray, anyelement);
drop operator if exists /` (anyelement, anyarray);
drop operator if exists /` (none, anyarray);
drop operator if exists /` (float[], float[]);
drop operator if exists /` (float, float[]);
drop operator if exists /` (float[], float);
drop operator if exists /` (none, float[]);
drop operator if exists /` (decimal[], decimal[]);
drop operator if exists /` (decimal, decimal[]);
drop operator if exists /` (decimal[], decimal);
drop operator if exists /` (none, decimal[]);
drop operator if exists /` (bigint[], bigint[]);
drop operator if exists /` (bigint, bigint[]);
drop operator if exists /` (bigint[], bigint);
drop operator if exists /` (int[], int[]);
drop operator if exists /` (int, int[]);
drop operator if exists /` (int[], int);
drop operator if exists % (anyarray, anyarray);
drop operator if exists % (anyelement, anyarray);
drop operator if exists % (anyarray, anyelement);
drop operator if exists %` (anyarray, anyarray);
drop operator if exists %` (anyarray, anyelement);
drop operator if exists %` (anyelement, anyarray);
drop operator if exists %` (decimal(32, 4)[], decimal(32, 4)[]);
drop operator if exists %` (decimal(32, 4), decimal(32, 4)[]);
drop operator if exists %` (decimal(32, 4)[], decimal(32, 4));
drop operator if exists %` (bigint[], bigint[]);
drop operator if exists %` (bigint, bigint[]);
drop operator if exists %` (bigint[], bigint);
drop operator if exists %` (int[], int[]);
drop operator if exists %` (int, int[]);
drop operator if exists %` (int[], int);
drop operator if exists %`- (decimal(32, 4)[], decimal(32, 4)[]);
drop operator if exists %`- (decimal(32, 4), decimal(32, 4)[]);
drop operator if exists %`- (decimal(32, 4)[], decimal(32, 4));
drop operator if exists %`- (bigint[], bigint[]);
drop operator if exists %`- (bigint, bigint[]);
drop operator if exists %`- (bigint[], bigint);
drop operator if exists %`- (int[], int[]);
drop operator if exists %`- (int, int[]);
drop operator if exists %`- (int[], int);
drop operator if exists ^ (anyarray, anyarray);
drop operator if exists ^ (anyelement, anyarray);
drop operator if exists ^ (anyarray, anyelement);
  -- -- -- -- drop operator if exists ^ (none, anyarray);
drop operator if exists ^` (float[], float[]);
drop operator if exists ^` (float, float[]);
drop operator if exists ^` (float[], float);
drop operator if exists ^` (none, float[]);
drop operator if exists ^! (anyarray, anyarray);
drop operator if exists ^! (anyelement, anyarray);
drop operator if exists ^! (anyarray, anyelement);
drop operator if exists ^! (none, anyarray);
drop operator if exists ^!` (float[], float[]);
drop operator if exists ^!` (float, float[]);
drop operator if exists ^!` (float[], float);
drop operator if exists ^!` (none, float[]);
drop operator if exists |` (boolean[], boolean[]);
drop operator if exists |` (boolean, boolean[]);
drop operator if exists |` (boolean[], boolean);
drop operator if exists |` (varbit[], varbit[]);
drop operator if exists |` (varbit, varbit[]);
drop operator if exists |` (varbit[], varbit);
drop operator if exists &` (boolean[], boolean[]);
drop operator if exists &` (boolean, boolean[]);
drop operator if exists &` (boolean[], boolean);
drop operator if exists &` (varbit[], varbit[]);
drop operator if exists &` (varbit, varbit[]);
drop operator if exists &` (varbit[], varbit);
drop operator if exists ~` (none, boolean[]);
drop operator if exists ~` (none, varbit[]);
drop operator if exists ~` (text[], text[]);
drop operator if exists ~` (text, text[]);
drop operator if exists ~` (text[], text);
drop operator if exists ~` (none, sm_sc.typ_l_complex[]);
drop operator if exists @~` (none, sm_sc.typ_l_complex[]);
drop operator if exists ~@` (none, sm_sc.typ_l_complex[]);
drop operator if exists ~^` (none, sm_sc.typ_l_complex[]);
drop operator if exists #` (boolean[], boolean[]);
drop operator if exists #` (boolean, boolean[]);
drop operator if exists #` (boolean[], boolean);
drop operator if exists #` (varbit[], varbit[]);
drop operator if exists #` (varbit, varbit[]);
drop operator if exists #` (varbit[], varbit);
drop operator if exists !#` (boolean[], boolean[]);
drop operator if exists !#` (boolean, boolean[]);
drop operator if exists !#` (boolean[], boolean);
drop operator if exists !#` (varbit[], varbit[]);
drop operator if exists !#` (varbit, varbit[]);
drop operator if exists !#` (varbit[], varbit);
drop operator if exists ||` (anyarray, anyarray);
drop operator if exists ||` (anyelement, anyarray);
drop operator if exists ||` (anyarray, anyelement);
drop operator if exists <<` (varbit[], int[]);
drop operator if exists <<` (varbit, int[]);
drop operator if exists <<` (varbit[], int);
drop operator if exists >>` (varbit[], int[]);
drop operator if exists >>` (varbit, int[]);
drop operator if exists >>` (varbit[], int);
drop operator if exists == (anyarray, anyarray);
drop operator if exists == (anyarray, anyelement);
drop operator if exists == (anyelement, anyarray);
drop operator if exists ==` (float[], float[]);
drop operator if exists ==` (float[], float);
drop operator if exists ==` (float, float[]);
drop operator if exists ==` (decimal[], decimal[]);
drop operator if exists ==` (decimal[], decimal);
drop operator if exists ==` (decimal, decimal[]);
drop operator if exists ==` (anyarray, anyarray);
drop operator if exists ==` (anyarray, anyelement);
drop operator if exists ==` (anyelement, anyarray);
drop operator if exists ==` (bigint[], bigint[]);
drop operator if exists ==` (bigint[], bigint);
drop operator if exists ==` (bigint, bigint[]);
drop operator if exists ==` (int[], int[]);
drop operator if exists ==` (int[], int);
drop operator if exists ==` (int, int[]);
-- -- -- -- drop operator if exists < (anyarray, anyarray);
  -- drop operator if exists < (anyarray, anyelement);
  -- drop operator if exists < (anyelement, anyarray);
drop operator if exists <` (float[], float[]);
drop operator if exists <` (float[], float);
drop operator if exists <` (float, float[]);
drop operator if exists <` (decimal[], decimal[]);
drop operator if exists <` (decimal[], decimal);
drop operator if exists <` (decimal, decimal[]);
drop operator if exists <` (anyarray, anyarray);
drop operator if exists <` (anyarray, anyelement);
drop operator if exists <` (anyelement, anyarray);
drop operator if exists <` (bigint[], bigint[]);
drop operator if exists <` (bigint[], bigint);
drop operator if exists <` (bigint, bigint[]);
drop operator if exists <` (int[], int[]);
drop operator if exists <` (int[], int);
drop operator if exists <` (int, int[]);
-- -- -- drop operator if exists > (anyarray, anyarray);
drop operator if exists > (anyarray, anyelement);
drop operator if exists > (anyelement, anyarray);
drop operator if exists >` (float[], float[]);
drop operator if exists >` (float[], float);
drop operator if exists >` (float, float[]);
drop operator if exists >` (decimal[], decimal[]);
drop operator if exists >` (decimal[], decimal);
drop operator if exists >` (decimal, decimal[]);
drop operator if exists >` (anyarray, anyarray);
drop operator if exists >` (anyarray, anyelement);
drop operator if exists >` (anyelement, anyarray);
drop operator if exists >` (bigint[], bigint[]);
drop operator if exists >` (bigint[], bigint);
drop operator if exists >` (bigint, bigint[]);
drop operator if exists >` (int[], int[]);
drop operator if exists >` (int[], int);
drop operator if exists >` (int, int[]);
-- drop operator if exists <= (anyarray, anyarray);
drop operator if exists <= (anyarray, anyelement);
drop operator if exists <= (anyelement, anyarray);
drop operator if exists <=` (float[], float[]);
drop operator if exists <=` (float[], float);
drop operator if exists <=` (float, float[]);
drop operator if exists <=` (decimal[], decimal[]);
drop operator if exists <=` (decimal[], decimal);
drop operator if exists <=` (decimal, decimal[]);
drop operator if exists <=` (anyarray, anyarray);
drop operator if exists <=` (anyarray, anyelement);
drop operator if exists <=` (anyelement, anyarray);
drop operator if exists <=` (bigint[], bigint[]);
drop operator if exists <=` (bigint[], bigint);
drop operator if exists <=` (bigint, bigint[]);
drop operator if exists <=` (int[], int[]);
drop operator if exists <=` (int[], int);
drop operator if exists <=` (int, int[]);
-- -- -- drop operator if exists >= (anyarray, anyarray);
drop operator if exists >= (anyarray, anyelement);
drop operator if exists >= (anyelement, anyarray);
drop operator if exists >=` (float[], float[]);
drop operator if exists >=` (float[], float);
drop operator if exists >=` (float, float[]);
drop operator if exists >=` (decimal[], decimal[]);
drop operator if exists >=` (decimal[], decimal);
drop operator if exists >=` (decimal, decimal[]);
drop operator if exists >=` (anyarray, anyarray);
drop operator if exists >=` (anyarray, anyelement);
drop operator if exists >=` (anyelement, anyarray);
drop operator if exists >=` (bigint[], bigint[]);
drop operator if exists >=` (bigint[], bigint);
drop operator if exists >=` (bigint, bigint[]);
drop operator if exists >=` (int[], int[]);
drop operator if exists >=` (int[], int);
drop operator if exists >=` (int, int[]);
drop operator if exists <>` (anyarray, anyarray);
drop operator if exists <>` (anyarray, anyelement);
drop operator if exists <>` (anyelement, anyarray);
drop operator if exists <>` (none, anyarray);
drop operator if exists <>` (none, anyarray);
drop operator if exists <>` (none, decimal[]);
drop operator if exists <>` (none, float[]);
drop operator if exists <>` (none, bigint[]);
drop operator if exists <>` (none, int[]);
drop operator if exists @<` (anyarray, anyarray);
drop operator if exists @<` (anyarray, anyelement);
drop operator if exists @<` (anyelement, anyarray);
drop operator if exists @>` (anyarray, anyarray);
drop operator if exists @>` (anyarray, anyelement);
drop operator if exists @>` (anyelement, anyarray);
drop operator if exists @|`  (none, anyarray);
drop operator if exists @`  (none, decimal[]);
drop operator if exists @`  (none, float[]);
drop operator if exists @`  (none, sm_sc.typ_l_complex[]);
drop operator if exists ~=` (anyarray, int);
  -- -- drop operator if exists ~=` (anyarray, none);
drop operator if exists ~<` (anyarray, int);
  -- -- drop operator if exists ~<` (decimal[], none);
drop operator if exists ~>` (anyarray, int);
  -- -- drop operator if exists ~>` (decimal[], none);
drop operator if exists ><` (anyarray, int);
  -- -- drop operator if exists ><` (decimal[], none);
drop operator if exists ||~| (none, anyarray);
drop operator if exists |-~| (none, anyarray);
drop operator if exists |+~| (anyarray, int);
drop operator if exists |+~| (float[], int);
drop operator if exists |+~| (decimal[], int);
drop operator if exists |<~| (none, anyarray);
drop operator if exists |>~| (none, anyarray);
drop operator if exists |*~| (anyarray, int[2]);
drop operator if exists |~~| (none, anyarray);
drop operator if exists |~~| (anyarray, int[2]);
drop operator if exists |^~| (none, anyarray);
drop operator if exists |^~| (none, float[]);
drop operator if exists |^~| (none, decimal[]);
drop operator if exists |^~| (anyarray, int[2]);
drop operator if exists |^~`| (none, sm_sc.typ_l_complex[]);
drop operator if exists |~^| (none, anyarray);
drop operator if exists |-|| (anyarray, anyarray);
drop operator if exists |-|| (anyelement, anyarray);
drop operator if exists |-|| (anyarray, anyelement);
drop operator if exists |||| (anyarray, anyarray);
drop operator if exists |||| (anyelement, anyarray);
drop operator if exists |||| (anyarray, anyelement);
drop operator if exists |><| (float[], int[]);
drop operator if exists |`| (anyarray, anyarray);
drop operator if exists |**| (float[], float[]);
  -- -- drop operator if exists |**| (float[], none);
drop operator if exists |**| (none, float[]);
drop operator if exists |@=| (none, anyarray);
drop operator if exists |@&`| (none, boolean[]);
drop operator if exists |@&`| (none, bit[]);
drop operator if exists |@|`| (none, boolean[]);
drop operator if exists |@|`| (none, bit[]);
drop operator if exists |@||| (none, anyarray);
drop operator if exists |@/<| (none, anyarray);
drop operator if exists |@/>| (none, anyarray);
drop operator if exists |@%`| (none, anyarray);
drop operator if exists |@%| (none, anyarray);
drop operator if exists |@#`| (none, anyarray);
drop operator if exists |@#| (none, anyarray);
drop operator if exists |@/=| (none, anyarray);
drop operator if exists |@<| (none, anyarray);
drop operator if exists |@>| (none, anyarray);
drop operator if exists |@/| (none, anyarray);
drop operator if exists |@*| (none, anyarray);
drop operator if exists |@+| (none, anyarray);
drop operator if exists |@=| (anyarray, int[]);
drop operator if exists |@&`| (boolean[], int[]);
drop operator if exists |@&`| (bit[], int[]);
drop operator if exists |@|`| (boolean[], int[]);
drop operator if exists |@|`| (bit[], int[]);
drop operator if exists |@||| (anyarray, int[]);
drop operator if exists |@/<| (anyarray, int[]);
drop operator if exists |@/>| (anyarray, int[]);
drop operator if exists |@%`| (anyarray, int[]);
drop operator if exists |@%| (anyarray, int[]);
drop operator if exists |@#`| (anyarray, int[]);
drop operator if exists |@#| (anyarray, int[]);
drop operator if exists |@/=| (anyarray, int[]);
drop operator if exists |@<| (anyarray, int[]);
drop operator if exists |@>| (anyarray, int[]);
drop operator if exists |@/| (anyarray, int[]);
drop operator if exists |@*| (anyarray, int[]);
drop operator if exists |@+| (anyarray, int[]);
drop operator if exists |`^| (anyarray, anyelement);
drop operator if exists |*^| (float[], int);
drop operator if exists +`| (anyarray, anyarray);
drop operator if exists -`| (anyarray, anyarray);
drop operator if exists |-` (anyarray, anyarray);
drop operator if exists *`| (anyarray, anyarray);
drop operator if exists /`| (anyarray, anyarray);
drop operator if exists |/` (anyarray, anyarray);
drop operator if exists ^`| (anyarray, anyarray);
drop operator if exists |^` (anyarray, anyarray);
drop operator if exists ^!`| (anyarray, anyarray);
drop operator if exists |^!` (anyarray, anyarray);
drop operator if exists %+`| (anyarray, anyarray);
drop operator if exists %-`| (anyarray, anyarray);
drop operator if exists %*`| (anyarray, anyarray);
drop operator if exists %/`| (anyarray, anyarray);
drop operator if exists %^`| (anyarray, anyarray);
drop operator if exists %^!`| (anyarray, anyarray);
drop operator if exists |-`% (anyarray, anyarray);
drop operator if exists |/`% (anyarray, anyarray);
drop operator if exists |^`% (anyarray, anyarray);
drop operator if exists |^!`% (anyarray, anyarray);
drop operator if exists @>| (anyarray, int[]);
drop operator if exists @/| (anyarray, int[]);
drop operator if exists @`| (anyarray, int[]);
-- -- drop operator if exists %@>| (anyarray, int[]);
-- -- drop operator if exists %@/| (anyarray, int[]);
-- -- drop operator if exists %@`| (anyarray, int[]);
drop operator if exists **| (anyarray, anyarray);
drop operator if exists %**| (anyarray, anyarray);

-- drop function
drop function if exists sm_sc.fv_d_abs(float[]);
drop function if exists sm_sc.fv_d_add(int[], int[]);
drop function if exists sm_sc.fv_d_div_1(float[], int[]);
drop function if exists sm_sc.fv_d_div_2(float[], float[]);
drop function if exists sm_sc.fv_d_div_2_un_de_broadcast(float[], float[]);
drop function if exists sm_sc.fv_d_exp(float[], float[]);
drop function if exists sm_sc.fv_d_ln(float[]);
drop function if exists sm_sc.fv_d_log_1(float[], float[], float[]);
drop function if exists sm_sc.fv_d_log_1_un_de_broadcast(float[], float[], float[]);
drop function if exists sm_sc.fv_d_log_2(float[][], float[][]);
drop function if exists sm_sc.fv_d_log_2_un_de_broadcast(float[][], float[][]);
drop function if exists sm_sc.fv_d_mul(float[], int[]);
drop function if exists sm_sc.fv_d_pow_1(float[], float[], float[]);
drop function if exists sm_sc.fv_d_pow_1_un_de_broadcast(float[], float[], float[]);
drop function if exists sm_sc.fv_d_pow_2(float[], float[], float[]);
drop function if exists sm_sc.fv_d_pow_2_un_de_broadcast(float[][], float[][], float[][]);
drop function if exists sm_sc.fv_d_sub_1(int[], int[]);
drop function if exists sm_sc.fv_d_sub_2(int[], int[]);
drop function if exists sm_sc.fv_opr_abs(anyarray);
drop function if exists sm_sc.fv_opr_add(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_add(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_add(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_add_py(float[], float[]);
drop function if exists sm_sc.fv_opr_add_py(float[], float);
drop function if exists sm_sc.fv_opr_add_py(float, float[]);
drop function if exists sm_sc.fv_opr_add_py(int[], int[]);
drop function if exists sm_sc.fv_opr_add_py(int[], int);
drop function if exists sm_sc.fv_opr_add_py(int, int[]);
drop function if exists sm_sc.fv_opr_add_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_add_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_add_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_add_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_add_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_add_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_and(boolean[], boolean[]);
drop function if exists sm_sc.fv_opr_and(boolean[], boolean);
drop function if exists sm_sc.fv_opr_and(boolean, boolean[]);
drop function if exists sm_sc.fv_opr_and(varbit[], varbit[]);
drop function if exists sm_sc.fv_opr_and(varbit[], varbit);
drop function if exists sm_sc.fv_opr_and(varbit, varbit[]);
drop function if exists sm_sc.fv_opr_ceil(anyarray, int);
drop function if exists sm_sc.fv_opr_ceil(anyarray);
drop function if exists sm_sc.fv_opr_compare(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_compare(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_compare(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_concat(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_concat(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_concat(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_conjugate(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_opr_conjugate_45(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_opr_conjugate_i(sm_sc.typ_l_complex[][]);
drop function if exists sm_sc.fv_div_for_zero(float, float);
drop function if exists sm_sc.fv_div_for_zero(anyelement, anyelement);
drop function if exists sm_sc.fv_opr_div(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_div(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_div(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_div(anyarray);
drop function if exists sm_sc.fv_opr_div_py(float[], float[]);
drop function if exists sm_sc.fv_opr_div_py(float[], float);
drop function if exists sm_sc.fv_opr_div_py(float, float[]);
drop function if exists sm_sc.fv_opr_div_py(float[]);
drop function if exists sm_sc.fv_opr_div_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_div_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_div_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_div_py(int[], int[]);
drop function if exists sm_sc.fv_opr_div_py(int[], int);
drop function if exists sm_sc.fv_opr_div_py(int, int[]);
drop function if exists sm_sc.fv_opr_div_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_div_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_div_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_div_py(decimal[]);
drop function if exists sm_sc.fv_opr_exp(anyarray);
drop function if exists sm_sc.fv_opr_exp_py(float[]);
drop function if exists sm_sc.fv_opr_floor(anyarray, int);
drop function if exists sm_sc.fv_opr_floor(anyarray);
drop function if exists sm_sc.fv_opr_greatest(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_greatest(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_greatest(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_imaginary(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_opr_is_equal(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_is_equal(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_is_equal(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_is_equal_py(float[], float[]);
drop function if exists sm_sc.fv_opr_is_equal_py(float, float[]);
drop function if exists sm_sc.fv_opr_is_equal_py(float[], float);
drop function if exists sm_sc.fv_opr_is_equal_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_is_equal_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_is_equal_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_is_equal_py(int[], int[]);
drop function if exists sm_sc.fv_opr_is_equal_py(int, int[]);
drop function if exists sm_sc.fv_opr_is_equal_py(int[], int);
drop function if exists sm_sc.fv_opr_is_equal_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_is_equal_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_is_equal_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_is_greater(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_is_greater(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_is_greater(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_is_greater_ex(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_is_greater_ex(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_is_greater_ex(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(float[], float[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(float, float[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(float[], float);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(int[], int[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(int, int[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(int[], int);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_is_greater_ex_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_is_greater_py(float[], float[]);
drop function if exists sm_sc.fv_opr_is_greater_py(float, float[]);
drop function if exists sm_sc.fv_opr_is_greater_py(float[], float);
drop function if exists sm_sc.fv_opr_is_greater_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_is_greater_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_is_greater_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_is_greater_py(int[], int[]);
drop function if exists sm_sc.fv_opr_is_greater_py(int, int[]);
drop function if exists sm_sc.fv_opr_is_greater_py(int[], int);
drop function if exists sm_sc.fv_opr_is_greater_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_is_greater_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_is_greater_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_is_less(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_is_less(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_is_less(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_is_less_ex(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_is_less_ex(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_is_less_ex(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_is_less_ex_py(float[], float[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(float, float[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(float[], float);
drop function if exists sm_sc.fv_opr_is_less_ex_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_is_less_ex_py(int[], int[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(int, int[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(int[], int);
drop function if exists sm_sc.fv_opr_is_less_ex_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_is_less_ex_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_is_less_py(float[], float[]);
drop function if exists sm_sc.fv_opr_is_less_py(float, float[]);
drop function if exists sm_sc.fv_opr_is_less_py(float[], float);
drop function if exists sm_sc.fv_opr_is_less_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_is_less_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_is_less_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_is_less_py(int[], int[]);
drop function if exists sm_sc.fv_opr_is_less_py(int, int[]);
drop function if exists sm_sc.fv_opr_is_less_py(int[], int);
drop function if exists sm_sc.fv_opr_is_less_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_is_less_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_is_less_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_is_regexp_match(text[], text[]);
drop function if exists sm_sc.fv_opr_is_regexp_match(text[], text);
drop function if exists sm_sc.fv_opr_is_regexp_match(text, text[]);
drop function if exists sm_sc.fv_opr_least(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_least(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_least(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_ln(anyarray);
drop function if exists sm_sc.fv_opr_ln_py(float[]);
drop function if exists sm_sc.fv_opr_log(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_log(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_log(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_log_py(float[], float[]);
drop function if exists sm_sc.fv_opr_log_py(float[], float);
drop function if exists sm_sc.fv_opr_log_py(float, float[]);
drop function if exists sm_sc.fv_opr_mod(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_mod(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_mod(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_mod_nega_py(decimal(32, 4)[], decimal(32, 4)[]);
drop function if exists sm_sc.fv_opr_mod_nega_py(decimal(32, 4)[], decimal(32, 4));
drop function if exists sm_sc.fv_opr_mod_nega_py(decimal(32, 4), decimal(32, 4)[]);
drop function if exists sm_sc.fv_opr_mod_nega_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_mod_nega_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_mod_nega_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_mod_nega_py(int[], int[]);
drop function if exists sm_sc.fv_opr_mod_nega_py(int[], int);
drop function if exists sm_sc.fv_opr_mod_nega_py(int, int[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(decimal(32, 4)[], decimal(32, 4)[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(decimal(32, 4)[], decimal(32, 4));
drop function if exists sm_sc.fv_opr_mod_posi_py(decimal(32, 4), decimal(32, 4)[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_mod_posi_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(int[], int[]);
drop function if exists sm_sc.fv_opr_mod_posi_py(int[], int);
drop function if exists sm_sc.fv_opr_mod_posi_py(int, int[]);
drop function if exists sm_sc.fv_opr_mul(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_mul(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_mul(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_mul_py(float[], float[]);
drop function if exists sm_sc.fv_opr_mul_py(float[], float);
drop function if exists sm_sc.fv_opr_mul_py(float, float[]);
drop function if exists sm_sc.fv_opr_mul_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_mul_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_mul_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_mul_py(int[], int[]);
drop function if exists sm_sc.fv_opr_mul_py(int[], int);
drop function if exists sm_sc.fv_opr_mul_py(int, int[]);
drop function if exists sm_sc.fv_opr_mul_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_mul_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_mul_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_norm(float[]);
drop function if exists sm_sc.fv_opr_norm(decimal[]);
drop function if exists sm_sc.fv_opr_not(boolean[]);
drop function if exists sm_sc.fv_opr_not(varbit[]);
drop function if exists sm_sc.fv_opr_or(boolean[], boolean[]);
drop function if exists sm_sc.fv_opr_or(boolean[], boolean);
drop function if exists sm_sc.fv_opr_or(boolean, boolean[]);
drop function if exists sm_sc.fv_opr_or(varbit[], varbit[]);
drop function if exists sm_sc.fv_opr_or(varbit[], varbit);
drop function if exists sm_sc.fv_opr_or(varbit, varbit[]);
drop function if exists sm_sc.fv_opr_pow(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_pow(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_pow(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_pow_py(float[], float[]);
drop function if exists sm_sc.fv_opr_pow_py(float[], float);
drop function if exists sm_sc.fv_opr_pow_py(float, float[]);
drop function if exists sm_sc.fv_opr_real(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_opr_round(anyarray, int);
drop function if exists sm_sc.fv_opr_round(anyarray);
drop function if exists sm_sc.fv_opr_shift_left(varbit[], int[]);
drop function if exists sm_sc.fv_opr_shift_left(varbit[], int);
drop function if exists sm_sc.fv_opr_shift_left(varbit, int[]);
drop function if exists sm_sc.fv_opr_shift_right(varbit[], int[]);
drop function if exists sm_sc.fv_opr_shift_right(varbit[], int);
drop function if exists sm_sc.fv_opr_shift_right(varbit, int[]);
drop function if exists sm_sc.fv_opr_sign(anyarray);
drop function if exists sm_sc.fv_opr_sign_py(decimal[]);
drop function if exists sm_sc.fv_opr_sign_py(float[]);
drop function if exists sm_sc.fv_opr_sign_py(bigint[]);
drop function if exists sm_sc.fv_opr_sign_py(int[]);
drop function if exists sm_sc.fv_opr_sub(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_sub(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_sub(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_sub(anyarray);
drop function if exists sm_sc.fv_opr_sub_py(float[], float[]);
drop function if exists sm_sc.fv_opr_sub_py(float[], float);
drop function if exists sm_sc.fv_opr_sub_py(float, float[]);
drop function if exists sm_sc.fv_opr_sub_py(float[]);
drop function if exists sm_sc.fv_opr_sub_py(bigint[], bigint[]);
drop function if exists sm_sc.fv_opr_sub_py(bigint[], bigint);
drop function if exists sm_sc.fv_opr_sub_py(bigint, bigint[]);
drop function if exists sm_sc.fv_opr_sub_py(bigint[]);
drop function if exists sm_sc.fv_opr_sub_py(int[], int[]);
drop function if exists sm_sc.fv_opr_sub_py(int[], int);
drop function if exists sm_sc.fv_opr_sub_py(int, int[]);
drop function if exists sm_sc.fv_opr_sub_py(int[]);
drop function if exists sm_sc.fv_opr_sub_py(decimal[], decimal[]);
drop function if exists sm_sc.fv_opr_sub_py(decimal[], decimal);
drop function if exists sm_sc.fv_opr_sub_py(decimal, decimal[]);
drop function if exists sm_sc.fv_opr_sub_py(decimal[]);
drop function if exists sm_sc.fv_opr_trunc(anyarray, int);
drop function if exists sm_sc.fv_opr_trunc(anyarray);
drop function if exists sm_sc.fv_opr_xnor(boolean[], boolean[]);
drop function if exists sm_sc.fv_opr_xnor(boolean[], boolean);
drop function if exists sm_sc.fv_opr_xnor(boolean, boolean[]);
drop function if exists sm_sc.fv_opr_xnor(varbit[], varbit[]);
drop function if exists sm_sc.fv_opr_xnor(varbit[], varbit);
drop function if exists sm_sc.fv_opr_xnor(varbit, varbit[]);
drop function if exists sm_sc.fv_opr_xor(boolean[], boolean[]);
drop function if exists sm_sc.fv_opr_xor(boolean[], boolean);
drop function if exists sm_sc.fv_opr_xor(boolean, boolean[]);
drop function if exists sm_sc.fv_opr_xor(varbit[], varbit[]);
drop function if exists sm_sc.fv_opr_xor(varbit[], varbit);
drop function if exists sm_sc.fv_opr_xor(varbit, varbit[]);
drop function if exists sm_sc.fv_d_mirror_x3_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_mirror_x4_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_mirror_x_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_mirror_y_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_turn_x_y_90_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_turn_y_x_90_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_chunk_prod_mx_dloss_dindepdt_1(float[], float[], int[], int[3]);
drop function if exists sm_sc.fv_d_chunk_prod_mx_dloss_dindepdt_2(float[], float[], int[], int[3]);
drop function if exists sm_sc.fv_d_chunk_transpose_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_concat_x3_dloss_dindepdt(anyarray, int4range, int[]);
drop function if exists sm_sc.fv_d_concat_x4_dloss_dindepdt(anyarray, int4range, int[]);
drop function if exists sm_sc.fv_d_concat_x_dloss_dindepdt(anyarray, int4range, int[]);
drop function if exists sm_sc.fv_d_concat_y_dloss_dindepdt(anyarray, int4range, int[]);
drop function if exists sm_sc.fv_d_mirror_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_prod_mx_1(float[][], int[]);
drop function if exists sm_sc.fv_d_prod_mx_2(float[][], int[]);
drop function if exists sm_sc.fv_d_prod_mx_dloss_dindepdt_1(float[], float[], int[]);
drop function if exists sm_sc.fv_d_prod_mx_dloss_dindepdt_2(float[], float[], int[]);
drop function if exists sm_sc.fv_d_transpose_3d_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_transpose_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_transpose_i_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_d_transpose_nd_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_turn_180_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_turn_180_dloss_dindepdt_py(float[], int[2]);
drop function if exists sm_sc.fv_d_turn_90_dloss_dindepdt(anyarray, int[2]);
drop function if exists sm_sc.fv_d_turn_90_dloss_dindepdt_py(float[], int[2]);
drop function if exists sm_sc.fv_opr_prod_mx(anyarray, anyarray);
drop function if exists sm_sc.fv_chunk_prod_mx(anyarray, anyarray, int[3]);
drop function if exists sm_sc.fv_chunk_transpose(anyarray, int[2]);
drop function if exists sm_sc.fv_concat_py(float[], float[], int);
drop function if exists sm_sc.fv_concat_x(anyarray, anyarray);
drop function if exists sm_sc.fv_concat_x(anyarray, anyelement);
drop function if exists sm_sc.fv_concat_x(anyelement, anyarray);
drop function if exists sm_sc.fv_concat_x3(anyarray, anyarray);
drop function if exists sm_sc.fv_concat_x3(anyarray, anyelement);
drop function if exists sm_sc.fv_concat_x3(anyelement, anyarray);
drop function if exists sm_sc.fv_concat_x4(anyarray, anyarray);
drop function if exists sm_sc.fv_concat_x4(anyarray, anyelement);
drop function if exists sm_sc.fv_concat_x4(anyelement, anyarray);
drop function if exists sm_sc.fv_concat_y(anyarray, anyarray);
drop function if exists sm_sc.fv_concat_y(anyarray, anyelement);
drop function if exists sm_sc.fv_concat_y(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_concat_heigh(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_concat_heigh(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_concat_heigh(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_concat_width(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_concat_width(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_concat_width(anyelement, anyarray);
drop function if exists sm_sc.fv_opr_mirror(anyarray, int);
drop function if exists sm_sc.fv_opr_mirror_heigh(anyarray);
drop function if exists sm_sc.fv_opr_mirror_py(float[], int);
drop function if exists sm_sc.fv_opr_mirror_py(decimal[], int);
drop function if exists sm_sc.fv_opr_mirror_width(anyarray);
drop function if exists sm_sc.fv_opr_prod_inner(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_prod_inner_pow(anyarray, anyelement);
drop function if exists sm_sc.fv_opr_prod_kronecker(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_prod_mx_left(float[], float[]);
drop function if exists sm_sc.fv_opr_prod_mx_pow(float[], int);
drop function if exists sm_sc.fv_opr_prod_mx_py(float[], float[]);
drop function if exists sm_sc.fv_opr_prod_mx_py_cupy(float[], float[]);
drop function if exists sm_sc.fv_opr_prod_mx_right(float[], float[]);
drop function if exists sm_sc.fv_opr_transpose(anyarray);
drop function if exists sm_sc.fv_opr_transpose_3d(anyarray, int[2]);
drop function if exists sm_sc.fv_opr_transpose_i(anyarray);
drop function if exists sm_sc.fv_opr_transpose_i_py(float[]);
drop function if exists sm_sc.fv_opr_transpose_nd(anyarray, int[2]);
drop function if exists sm_sc.fv_opr_transpose_nd_py(float[]);
drop function if exists sm_sc.fv_opr_transpose_py(float[]);
drop function if exists sm_sc.fv_opr_transpose_py(decimal[]);
drop function if exists sm_sc.fv_opr_turn_180(anyarray, int[2]);
drop function if exists sm_sc.fv_opr_turn_180_py(float[], int[2]);
drop function if exists sm_sc.fv_opr_turn_90(anyarray, int[2]);
drop function if exists sm_sc.fv_opr_turn_90_py(float[], int[2]);
drop function if exists sm_sc.fv_opr_turn_heigh_width_180(anyarray);
drop function if exists sm_sc.fv_opr_turn_heigh_width_90(anyarray);
drop function if exists sm_sc.fv_opr_turn_width_heigh_90(anyarray);
drop function if exists sm_sc.fv_turn_squr_chunk(anyarray, int8range[], int[2], varchar(8));
drop function if exists sm_sc.__fv_mirror_x(anyarray);
drop function if exists sm_sc.__fv_mirror_x3(anyarray);
drop function if exists sm_sc.__fv_mirror_x4(anyarray);
drop function if exists sm_sc.__fv_mirror_y(anyarray);
drop function if exists sm_sc.__fv_turn_x3_x4_180(anyarray);
drop function if exists sm_sc.__fv_turn_x3_x4_90(anyarray);
drop function if exists sm_sc.__fv_turn_x3_x_90(anyarray);
drop function if exists sm_sc.__fv_turn_x3_y_90(anyarray);
drop function if exists sm_sc.__fv_turn_x4_x3_90(anyarray);
drop function if exists sm_sc.__fv_turn_x4_x_90(anyarray);
drop function if exists sm_sc.__fv_turn_x4_y_90(anyarray);
drop function if exists sm_sc.__fv_turn_x_x3_180(anyarray);
drop function if exists sm_sc.__fv_turn_x_x3_90(anyarray);
drop function if exists sm_sc.__fv_turn_x_x4_180(anyarray);
drop function if exists sm_sc.__fv_turn_x_x4_90(anyarray);
drop function if exists sm_sc.__fv_turn_x_y_90(anyarray);
drop function if exists sm_sc.__fv_turn_y_x3_180(anyarray);
drop function if exists sm_sc.__fv_turn_y_x3_90(anyarray);
drop function if exists sm_sc.__fv_turn_y_x4_180(anyarray);
drop function if exists sm_sc.__fv_turn_y_x4_90(anyarray);
drop function if exists sm_sc.__fv_turn_y_x_180(anyarray);
drop function if exists sm_sc.__fv_turn_y_x_90(anyarray);
drop function if exists sm_sc.fv_d_amask_dloss_dindepdt_1(float[], int[]);
drop function if exists sm_sc.fv_d_apad_dloss_dindepdt_1(float[], int);
drop function if exists sm_sc.fv_d_apad_dloss_dindepdt_2(float[], int, int);
drop function if exists sm_sc.fv_d_bmask_dloss_dindepdt_1(float[], int[]);
drop function if exists sm_sc.fv_d_bpad_dloss_dindepdt_1(float[], int);
drop function if exists sm_sc.fv_d_bpad_dloss_dindepdt_2(float[], int, int);
drop function if exists sm_sc.fv_d_chunk_dloss_dindepdt(float[], int[], int[]);
drop function if exists sm_sc.fv_d_lmask_dloss_dindepdt_1(float[], int[]);
drop function if exists sm_sc.fv_d_lower_tri_mx_dloss_dindepdt(float[]);
drop function if exists sm_sc.fv_d_lower_tri_mx_ex_dloss_dindepdt(float[]);
drop function if exists sm_sc.fv_d_lpad_dloss_dindepdt_1(float[], int);
drop function if exists sm_sc.fv_d_lpad_dloss_dindepdt_2(float[], int, int);
drop function if exists sm_sc.fv_d_mx_ascend_dim_dloss_dindepdt(float[], int);
drop function if exists sm_sc.fv_d_mx_descend_dim_dloss_dindepdt(float[], int);
drop function if exists sm_sc.fv_d_mx_ele_2d_2_3d_dloss_dindepdt(anyarray, int, int, boolean);
drop function if exists sm_sc.fv_d_mx_ele_3d_2_2d_dloss_dindepdt(anyarray, int, int[2], int, int[4]);
drop function if exists sm_sc.fv_d_mx_ele_3d_2_4d_dloss_dindepdt(anyarray, int, int, boolean);
drop function if exists sm_sc.fv_d_mx_ele_4d_2_3d_dloss_dindepdt(anyarray, int, int[2], int, int[4]);
drop function if exists sm_sc.fv_d_mx_ele_flatten_2dims_dloss_dindepdt(anyarray, int[2], int, int[]);
drop function if exists sm_sc.fv_d_mx_ele_flatten_2dims_dloss_dindepdt_py(float[], int[2], int, int[]);
drop function if exists sm_sc.fv_d_mx_slice_3d_2_2d_dloss_dindepdt(float[], int[], int, int);
drop function if exists sm_sc.fv_d_mx_slice_4d_2_2d_dloss_dindepdt(float[], int[], int[], int[]);
drop function if exists sm_sc.fv_d_mx_slice_4d_2_3d_dloss_dindepdt(float[], int[], int, int);
drop function if exists sm_sc.fv_d_new_dloss_dindepdt(float[], int);
drop function if exists sm_sc.fv_d_repeat_axis_dloss_dindepdt(float[], int[], int[]);
drop function if exists sm_sc.fv_d_rmask_dloss_dindepdt_1(float[], int[]);
drop function if exists sm_sc.fv_d_rpad_dloss_dindepdt_1(float[], int);
drop function if exists sm_sc.fv_d_rpad_dloss_dindepdt_2(float[], int, int);
drop function if exists sm_sc.fv_d_sample_x3_dloss_dindepdt_1(float[], int, int, int4range[]);
drop function if exists sm_sc.fv_d_sample_x4_dloss_dindepdt_1(float[], int, int, int4range[]);
drop function if exists sm_sc.fv_d_sample_x_dloss_dindepdt_1(float[], int, int, int4range[]);
drop function if exists sm_sc.fv_d_sample_y_dloss_dindepdt_1(float[], int, int, int4range[]);
drop function if exists sm_sc.fv_d_slice_x3_dloss_dindepdt(float[], int, int4range[]);
drop function if exists sm_sc.fv_d_slice_x4_dloss_dindepdt(float[], int, int4range[]);
drop function if exists sm_sc.fv_d_slice_x_dloss_dindepdt(float[], int, int4range[]);
drop function if exists sm_sc.fv_d_slice_y_dloss_dindepdt(float[], int, int4range[]);
drop function if exists sm_sc.fv_d_upper_tri_mx_dloss_dindepdt(float[]);
drop function if exists sm_sc.fv_d_upper_tri_mx_ex_dloss_dindepdt(float[]);
drop function if exists sm_sc.ft_rand_ele_x(anyarray, int);
drop function if exists sm_sc.ft_rand_ele_x_pick(anyarray, int);
drop function if exists sm_sc.ft_rand_ele_y(anyarray, int);
drop function if exists sm_sc.ft_rand_ele_y_pick(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x3(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x3_pick(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x4(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x4_pick(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_x_pick(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_y(anyarray, int);
drop function if exists sm_sc.ft_rand_slice_y_pick(anyarray, int);
drop function if exists sm_sc.fv_amask(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_apad(anyarray, anyarray, int);
drop function if exists sm_sc.fv_apad(anyarray, int);
drop function if exists sm_sc.fv_area_replace(anyarray, int[], anyarray);
drop function if exists sm_sc.fv_area_replace(anyarray, int, anyarray);
drop function if exists sm_sc.fv_array_1d_set_ele(anyarray, int, anyelement);
drop function if exists sm_sc.fv_array_1d_set_ele(anyarray, int, anyarray);
drop function if exists sm_sc.fv_array_1d_set_ele(anyarray, int[], anyarray);
drop function if exists sm_sc.fv_array_1d_set_ele(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_arr_remove_1d(anyarray, anyarray);
drop function if exists sm_sc.fv_atrim(anyarray, anyelement);
drop function if exists sm_sc.fv_augmented(anyarray, int[2], int[2], anyelement);
drop function if exists sm_sc.fv_bmask(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_bpad(anyarray, anyarray, int);
drop function if exists sm_sc.fv_bpad(anyarray, int);
drop function if exists sm_sc.fv_btrim(anyarray, anyelement);
drop function if exists sm_sc.fv_chunk(anyarray, int[2][]);
drop function if exists sm_sc.fv_coalesce(anyarray, anyarray);
drop function if exists sm_sc.fv_coalesce(anyarray, anynonarray);
drop function if exists sm_sc.fv_coalesce(anynonarray, anyarray);
drop function if exists sm_sc.fv_coalesce_variadic(variadic anyarray);
drop function if exists sm_sc.fv_ele_replace(anyarray, anyarray, anyelement);
drop function if exists sm_sc.fv_eye(anyelement, int, variadic anyarray);
drop function if exists sm_sc.fv_cast_array_ex;
drop function if exists sm_sc.fv_eye_arr_dense(variadic sm_sc.__typ_array_ex[]);
drop function if exists sm_sc.fv_eye_arr_dense(variadic sm_sc.__typ_array_ex[]);
drop function if exists sm_sc.fv_cast_array_ex;
drop function if exists sm_sc.fv_eye_arr_sparse(variadic sm_sc.__typ_array_ex[]);
drop function if exists sm_sc.fv_eye_arr_sparse(variadic sm_sc.__typ_array_ex[]);
drop function if exists sm_sc.fv_eye_unit(float, int, int[]);
drop function if exists sm_sc.fv_eye_unit(int);
drop function if exists sm_sc.fv_lmask(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_lower_tri_mx(anyarray, anyelement);
drop function if exists sm_sc.fv_lower_tri_mx(anyarray);
drop function if exists sm_sc.fv_lower_tri_mx_ex(anyarray, anyelement);
drop function if exists sm_sc.fv_lower_tri_mx_ex(anyarray);
drop function if exists sm_sc.fv_lpad(anyarray, anyarray, int);
drop function if exists sm_sc.fv_lpad(anyarray, int);
drop function if exists sm_sc.fv_ltrim(anyarray, anyelement);
drop function if exists sm_sc.fv_mx_ascend_dim(anyarray, int);
drop function if exists sm_sc.fv_mx_descend_dim(anyarray, int);
drop function if exists sm_sc.fv_mx_descend_dim_py(float[], int);
drop function if exists sm_sc.fv_mx_ele_1d_2_2d(anyarray, int);
drop function if exists sm_sc.fv_mx_ele_1d_2_2d_py(float[], int);
drop function if exists sm_sc.fv_mx_ele_2d_2_1d(anyarray, int);
drop function if exists sm_sc.fv_mx_ele_2d_2_1d_py(float[], int);
drop function if exists sm_sc.fv_mx_ele_2d_2_3d(anyarray, int, int, int, boolean);
drop function if exists sm_sc.fv_mx_ele_2d_2_3d_py(float[], int, int, int, boolean);
drop function if exists sm_sc.fv_mx_ele_3d_2_2d(anyarray, int[2], int);
drop function if exists sm_sc.fv_mx_ele_3d_2_2d_py(float[], int[], int);
drop function if exists sm_sc.fv_mx_ele_3d_2_4d(anyarray, int, int, int, boolean);
drop function if exists sm_sc.fv_mx_ele_3d_2_4d_py(float[], int, int, int, boolean);
drop function if exists sm_sc.fv_mx_ele_4d_2_3d(anyarray, int[2], int);
drop function if exists sm_sc.fv_mx_ele_4d_2_3d_py(float[], int[2], int);
drop function if exists sm_sc.fv_mx_ele_flatten_2dims(anyarray, int[2], int);
drop function if exists sm_sc.fv_mx_ele_flatten_2dims_py(float[], int[2], int);
drop function if exists sm_sc.fv_mx_slice_3d_2_2d(anyarray, int, int);
drop function if exists sm_sc.fv_mx_slice_3d_2_2d_py(float[], int, int);
drop function if exists sm_sc.fv_mx_slice_4d_2_2d(anyarray, int[], int[]);
drop function if exists sm_sc.fv_mx_slice_4d_2_2d_py(float[], int[], int[]);
drop function if exists sm_sc.fv_mx_slice_4d_2_3d(anyarray, int, int);
drop function if exists sm_sc.fv_mx_slice_4d_2_3d_py(float[], int, int);
drop function if exists sm_sc.fv_new(anynonarray, int[]);
drop function if exists sm_sc.fv_new(anyarray, int[]);
drop function if exists sm_sc.fv_new_rand(int[]);
drop function if exists sm_sc.fv_new_rand(int[]);
drop function if exists sm_sc.fv_new_rand(float, int[]);
drop function if exists sm_sc.fv_new_rand(numrange, int[]);
drop function if exists sm_sc.fv_new_randn(float, float, int[]);
drop function if exists sm_sc.fv_new_randn(float, float, int[]);
drop function if exists sm_sc.fv_new_rand_enum(anyarray, int[2]);
drop function if exists sm_sc.fv_nullif(anyarray, anyarray);
drop function if exists sm_sc.fv_nullif(anyarray, anyelement);
drop function if exists sm_sc.fv_nullif(anyelement, anyarray);
drop function if exists sm_sc.fv_reshape(float[], int[]);
drop function if exists sm_sc.fv_pos_replaces(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_pos_replaces(anyarray, int4range[], anyelement);
drop function if exists sm_sc.fv_rand_1d_ele(int, int);
drop function if exists sm_sc.fv_rand_ele_pick(anyarray);
drop function if exists sm_sc.fv_rand_1d_ele_pick(anyarray, int);
drop function if exists sm_sc.fv_rand_1d_ele_pick(bigint, int);
drop function if exists sm_sc.fv_rand_1d_ele_pick(int, int);
drop function if exists sm_sc.fv_rand_slice_x(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_x3(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_x3_pick(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_x4(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_x4_pick(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_x_pick(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_y(anyarray, int);
drop function if exists sm_sc.fv_rand_slice_y_pick(anyarray, int);
drop function if exists sm_sc.fv_regexp_matches(text[], text[], text);
drop function if exists sm_sc.fv_regexp_matches(text[], text, text);
drop function if exists sm_sc.fv_regexp_matches(text, text[], text);
drop function if exists sm_sc.fv_regexp_replace(text[], text[], text, text);
drop function if exists sm_sc.fv_regexp_replace(text[], text, text, text);
drop function if exists sm_sc.fv_regexp_replace(text, text[], text, text);
drop function if exists sm_sc.fv_repeat_axis_py(float[], int, int);
drop function if exists sm_sc.fv_repeat_axis_py(float[], int[], int[]);
drop function if exists sm_sc.fv_rmask(anyarray, int[], anyelement);
drop function if exists sm_sc.fv_rpad(anyarray, anyarray, int);
drop function if exists sm_sc.fv_rpad(anyarray, int);
drop function if exists sm_sc.fv_rtrim(anyarray, anyelement);
drop function if exists sm_sc.fv_sample_x(anyarray, int, int, int4range[], anyarray);
drop function if exists sm_sc.fv_sample_x(anyarray, int, int, int4range[]);
drop function if exists sm_sc.fv_sample_x3(anyarray, int, int, int4range[], anyarray);
drop function if exists sm_sc.fv_sample_x3(anyarray, int, int, int4range[]);
drop function if exists sm_sc.fv_sample_x3_py(float[], int, int, int4range, float);
drop function if exists sm_sc.fv_sample_x4(anyarray, int, int, int4range[], anyarray);
drop function if exists sm_sc.fv_sample_x4(anyarray, int, int, int4range[]);
drop function if exists sm_sc.fv_sample_x4_py(float[], int, int, int4range, float);
drop function if exists sm_sc.fv_sample_x_py(float[], int, int, int4range, float);
drop function if exists sm_sc.fv_sample_y(anyarray, int, int, int4range[], anyarray);
drop function if exists sm_sc.fv_sample_y(anyarray, int, int, int4range[]);
drop function if exists sm_sc.fv_sample_y_py(float[], int, int, int4range, float);
drop function if exists sm_sc.fv_slice_x(anyarray, int4range[]);
drop function if exists sm_sc.fv_slice_x3(anyarray, int4range[]);
drop function if exists sm_sc.fv_slice_x4(anyarray, int4range[]);
drop function if exists sm_sc.fv_slice_y(anyarray, int4range[]);
drop function if exists sm_sc.fv_strided_float_py(float[], int[], int[]);
drop function if exists sm_sc.fv_trim(anyarray, anyelement);
drop function if exists sm_sc.fv_upper_tri_mx(anyarray, anyelement);
drop function if exists sm_sc.fv_upper_tri_mx(anyarray);
drop function if exists sm_sc.fv_upper_tri_mx_ex(anyarray, anyelement);
drop function if exists sm_sc.fv_upper_tri_mx_ex(anyarray);
drop function if exists sm_sc.fv_d_acos(float[][]);
drop function if exists sm_sc.fv_d_acosh(float[][]);
drop function if exists sm_sc.fv_d_acot(float[][]);
drop function if exists sm_sc.fv_d_acsc(float[][]);
drop function if exists sm_sc.fv_d_asec(float[][]);
drop function if exists sm_sc.fv_d_asin(float[][]);
drop function if exists sm_sc.fv_d_asinh(float[][]);
drop function if exists sm_sc.fv_d_atan(float[][]);
drop function if exists sm_sc.fv_d_atanh(float[][]);
drop function if exists sm_sc.fv_d_cos(float[][]);
drop function if exists sm_sc.fv_d_cosh(float[][]);
drop function if exists sm_sc.fv_d_cot(float[][]);
drop function if exists sm_sc.fv_d_csc(float[][], float[][]);
drop function if exists sm_sc.fv_d_sec(float[][], float[][]);
drop function if exists sm_sc.fv_d_sin(float[][]);
drop function if exists sm_sc.fv_d_sinh(float[][]);
drop function if exists sm_sc.fv_d_tan(float[][]);
drop function if exists sm_sc.fv_d_tanh(float[][], float[][]);
drop function if exists sm_sc.fv_acos(double precision[]);
drop function if exists sm_sc.fv_acosd(double precision[]);
drop function if exists sm_sc.fv_acosh(double precision[]);
drop function if exists sm_sc.fv_acot(double precision[]);
drop function if exists sm_sc.fv_asin(double precision[]);
drop function if exists sm_sc.fv_asind(double precision[]);
drop function if exists sm_sc.fv_asinh(double precision[]);
drop function if exists sm_sc.fv_atan(double precision[]);
drop function if exists sm_sc.fv_atand(double precision[]);
drop function if exists sm_sc.fv_atanh(double precision[]);
drop function if exists sm_sc.fv_cos(double precision[]);
drop function if exists sm_sc.fv_cosd(double precision[]);
drop function if exists sm_sc.fv_cosh(double precision[]);
drop function if exists sm_sc.fv_cosh_py(float[]);
drop function if exists sm_sc.fv_cos_py(float[]);
drop function if exists sm_sc.fv_cot(double precision[]);
drop function if exists sm_sc.fv_cotd(double precision[]);
drop function if exists sm_sc.fv_csc(double precision[]);
drop function if exists sm_sc.fv_degrees(double precision[]);
drop function if exists sm_sc.fv_radians(double precision[]);
drop function if exists sm_sc.fv_sec(double precision[]);
drop function if exists sm_sc.fv_sin(double precision[]);
drop function if exists sm_sc.fv_sind(double precision[]);
drop function if exists sm_sc.fv_sinh(double precision[]);
drop function if exists sm_sc.fv_sinh_py(float[]);
drop function if exists sm_sc.fv_sin_py(float[]);
drop function if exists sm_sc.fv_tan(double precision[]);
drop function if exists sm_sc.fv_tand(double precision[]);
drop function if exists sm_sc.fv_tanh(double precision[]);
drop function if exists sm_sc.fv_tanh_py(float[]);
drop function if exists sm_sc.fv_tan_py(float[]);
drop function if exists sm_sc.fv_grad_heigh_1st;
drop function if exists sm_sc.fv_grad_heigh_2nd;
drop function if exists sm_sc.fv_grad_width_1st;
drop function if exists sm_sc.fv_grad_width_2nd;
drop function if exists sm_sc.fv_sgn_fft(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_sgn_fft2(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_sgn_ifft(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_sgn_ifft2(sm_sc.typ_l_complex[]);
drop function if exists sm_sc.fv_sgn_kalman(float[], float, float, float);
drop function if exists sm_sc.fv_d_aggr_chunk_avg_dloss_dindepdt(int[], anyarray);
drop function if exists sm_sc.fv_d_aggr_chunk_max_dloss_dindepdt(anyarray, anyarray, anyarray);
drop function if exists sm_sc.fv_d_aggr_chunk_min_dloss_dindepdt(anyarray, anyarray, anyarray);
drop function if exists sm_sc.fv_d_aggr_chunk_prod_dloss_dindepdt(anyarray, anyarray, anyarray);
drop function if exists sm_sc.fv_d_aggr_chunk_sum_dloss_dindepdt(int[], anyarray);
drop function if exists sm_sc.fv_d_aggr_slice_avg_dloss_dindepdt(float[], int[]);
drop function if exists sm_sc.fv_d_aggr_slice_max_dloss_dindepdt(anyarray, anyarray, anyarray, int[]);
drop function if exists sm_sc.fv_d_aggr_slice_min_dloss_dindepdt(anyarray, anyarray, anyarray, int[]);
drop function if exists sm_sc.fv_d_aggr_slice_prod_dloss_dindepdt(anyarray, anyarray, anyarray, int[]);
drop function if exists sm_sc.fv_d_aggr_slice_sum_dloss_dindepdt(int[], float[], int[]);
drop function if exists sm_sc.fv_aggr_x_and(boolean[]);
drop function if exists sm_sc.fv_aggr_x_and(boolean[], int);
drop function if exists sm_sc.fv_aggr_x_and(bit[], int[], int[]);
drop function if exists sm_sc.fv_aggr_x_and(bit[], int);
drop function if exists sm_sc.fv_aggr_x_avg(anyarray);
drop function if exists sm_sc.fv_aggr_x_avg(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_coalesce(anyarray);
drop function if exists sm_sc.fv_aggr_x_coalesce(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_concat(anyarray);
drop function if exists sm_sc.fv_aggr_x_concat(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_is_exists_null(anyarray);
drop function if exists sm_sc.fv_aggr_x_is_exists_null(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_max(anyarray);
drop function if exists sm_sc.fv_aggr_x_max(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_median(anyarray);
drop function if exists sm_sc.fv_aggr_x_median(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_min(anyarray);
drop function if exists sm_sc.fv_aggr_x_min(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_mode(anyarray);
drop function if exists sm_sc.fv_aggr_x_mode(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_or(boolean[]);
drop function if exists sm_sc.fv_aggr_x_or(boolean[], int);
drop function if exists sm_sc.fv_aggr_x_or(bit[], int[], int[]);
drop function if exists sm_sc.fv_aggr_x_or(bit[], int);
drop function if exists sm_sc.fv_aggr_x_prod(anyarray);
drop function if exists sm_sc.fv_aggr_x_prod(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_ptp(anyarray);
drop function if exists sm_sc.fv_aggr_x_ptp(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_stddev_pop(anyarray);
drop function if exists sm_sc.fv_aggr_x_stddev_pop(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_stddev_samp(anyarray);
drop function if exists sm_sc.fv_aggr_x_stddev_samp(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_sum(anyarray);
drop function if exists sm_sc.fv_aggr_x_sum(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_var_pop(anyarray);
drop function if exists sm_sc.fv_aggr_x_var_pop(anyarray, int);
drop function if exists sm_sc.fv_aggr_x_var_samp(anyarray);
drop function if exists sm_sc.fv_aggr_x_var_samp(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_and(boolean[]);
drop function if exists sm_sc.fv_aggr_y_and(boolean[], int);
drop function if exists sm_sc.fv_aggr_y_and(bit[]);
drop function if exists sm_sc.fv_aggr_y_and(bit[], int);
drop function if exists sm_sc.fv_aggr_y_avg(anyarray);
drop function if exists sm_sc.fv_aggr_y_avg(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_coalesce(anyarray);
drop function if exists sm_sc.fv_aggr_y_coalesce(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_concat(anyarray);
drop function if exists sm_sc.fv_aggr_y_concat(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_is_exists_null(anyarray);
drop function if exists sm_sc.fv_aggr_y_is_exists_null(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_max(anyarray);
drop function if exists sm_sc.fv_aggr_y_max(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_median(anyarray);
drop function if exists sm_sc.fv_aggr_y_median(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_min(anyarray);
drop function if exists sm_sc.fv_aggr_y_min(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_mode(anyarray);
drop function if exists sm_sc.fv_aggr_y_mode(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_or(boolean[]);
drop function if exists sm_sc.fv_aggr_y_or(boolean[], int);
drop function if exists sm_sc.fv_aggr_y_or(bit[], int[], int[]);
drop function if exists sm_sc.fv_aggr_y_or(bit[], int);
drop function if exists sm_sc.fv_aggr_y_prod(anyarray);
drop function if exists sm_sc.fv_aggr_y_prod(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_ptp(anyarray);
drop function if exists sm_sc.fv_aggr_y_ptp(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_stddev_pop(anyarray);
drop function if exists sm_sc.fv_aggr_y_stddev_pop(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_stddev_samp(anyarray);
drop function if exists sm_sc.fv_aggr_y_stddev_samp(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_sum(anyarray);
drop function if exists sm_sc.fv_aggr_y_sum(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_var_pop(anyarray);
drop function if exists sm_sc.fv_aggr_y_var_pop(anyarray, int);
drop function if exists sm_sc.fv_aggr_y_var_samp(anyarray);
drop function if exists sm_sc.fv_aggr_y_var_samp(anyarray, int);
drop function if exists sm_sc.fv_aggr_chunk_avg(float[], int[]);
drop function if exists sm_sc.fv_aggr_chunk_max(float[], int[]);
drop function if exists sm_sc.fv_aggr_chunk_min(float[], int[]);
drop function if exists sm_sc.fv_aggr_chunk_prod(float[], int[]);
drop function if exists sm_sc.fv_aggr_chunk_sum(float[], int[]);
drop function if exists sm_sc.fv_aggr_slice_and(bit[]);
drop function if exists sm_sc.fv_aggr_slice_and(bit[], int[]);
drop function if exists sm_sc.fv_aggr_slice_and(boolean[]);
drop function if exists sm_sc.fv_aggr_slice_and(boolean[], int[]);
drop function if exists sm_sc.fv_aggr_slice_avg(anyarray);
drop function if exists sm_sc.fv_aggr_slice_avg(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_coalesce(anyarray);
drop function if exists sm_sc.fv_aggr_slice_coalesce(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_concat(anyarray);
drop function if exists sm_sc.fv_aggr_slice_concat(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_is_exists_null(anyarray);
drop function if exists sm_sc.fv_aggr_slice_is_exists_null(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_max(anyarray);
drop function if exists sm_sc.fv_aggr_slice_max(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_median(anyarray);
drop function if exists sm_sc.fv_aggr_slice_median(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_min(anyarray);
drop function if exists sm_sc.fv_aggr_slice_min(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_mode(anyarray);
drop function if exists sm_sc.fv_aggr_slice_mode(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_or(bit[]);
drop function if exists sm_sc.fv_aggr_slice_or(bit[], int[]);
drop function if exists sm_sc.fv_aggr_slice_or(boolean[]);
drop function if exists sm_sc.fv_aggr_slice_or(boolean[], int[]);
drop function if exists sm_sc.fv_aggr_slice_prod(anyarray);
drop function if exists sm_sc.fv_aggr_slice_prod(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_ptp(anyarray);
drop function if exists sm_sc.fv_aggr_slice_ptp(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_stddev_pop(anyarray);
drop function if exists sm_sc.fv_aggr_slice_stddev_pop(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_stddev_samp(anyarray);
drop function if exists sm_sc.fv_aggr_slice_stddev_samp(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_sum(anyarray);
drop function if exists sm_sc.fv_aggr_slice_sum(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_var_pop(anyarray);
drop function if exists sm_sc.fv_aggr_slice_var_pop(anyarray, int[]);
drop function if exists sm_sc.fv_aggr_slice_var_samp(anyarray);
drop function if exists sm_sc.fv_aggr_slice_var_samp(anyarray, int[]);
drop function if exists sm_sc.fv_idx_1d_max(anyarray);
drop function if exists sm_sc.fv_idx_1d_min(anyarray);
drop function if exists sm_sc.fv_idx_mx_max(anyarray);
drop function if exists sm_sc.fv_idx_mx_min(anyarray);
drop function if exists sm_sc.fv_idx_x_max(anyarray);
drop function if exists sm_sc.fv_idx_x_min(anyarray);
drop function if exists sm_sc.fv_idx_y_max(anyarray);
drop function if exists sm_sc.fv_idx_y_min(anyarray);
drop function if exists sm_sc.fv_ord_by_col(anyarray, int, boolean);
drop function if exists sm_sc.fv_ord_by_row(anyarray, int, boolean);
drop function if exists sm_sc.fv_d_mx_avg(int, int[]);
drop function if exists sm_sc.fv_d_mx_concat_x3_dloss_dindepdt_n(float[], int, int, int[]);
drop function if exists sm_sc.fv_d_mx_concat_x4_dloss_dindepdt_n(float[], int, int, int[]);
drop function if exists sm_sc.fv_d_mx_concat_x_dloss_dindepdt_n(float[], int, int, int[]);
drop function if exists sm_sc.fv_d_mx_concat_y_dloss_dindepdt_n(float[], int, int, int[]);
drop function if exists sm_sc.fv_d_mx_max(float[], float[]);
drop function if exists sm_sc.fv_d_mx_min(float[], float[]);
drop function if exists sm_sc.fv_d_mx_prod(float[], float[]);
drop function if exists sm_sc.fv_d_mx_sum(int[]);
drop function if exists sm_sc.__fv_arr_float_add_ex;
drop function if exists sm_sc.__fv_mx_avg_final;
drop function if exists sm_sc.__fv_arr_cpx_add_ex;
drop function if exists sm_sc.__fv_mx_avg_final_cpx;
drop function if exists sm_sc.__fv_array_concat_1d(anyarray, anyarray);
drop function if exists sm_sc.fv_d_elu_asso(float, float, float);
drop function if exists sm_sc.fv_d_gelu(float);
drop function if exists sm_sc.fv_d_leaky_relu_asso(float, float);
drop function if exists sm_sc.fv_d_relu(float);
drop function if exists sm_sc.fv_d_selu(float, float);
drop function if exists sm_sc.fv_d_sigmoid(float, float);
drop function if exists sm_sc.fv_d_softplus(float);
drop function if exists sm_sc.fv_d_swish(float, float);
drop function if exists sm_sc.fv_elu(float, float);
drop function if exists sm_sc.fv_gelu(float);
drop function if exists sm_sc.fv_leaky_relu(float, float);
drop function if exists sm_sc.fv_relu(float);
drop function if exists sm_sc.fv_selu(float);
drop function if exists sm_sc.fv_sigmoid(float);
drop function if exists sm_sc.fv_softplus(float);
drop function if exists sm_sc.fv_swish(float);
drop function if exists sm_sc.fv_d_standlize_mx_softmax_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_mx_softmax_dloss_dindepdt(float[], float[], float[], int[2]);
drop function if exists sm_sc.fv_d_standlize_mx_zscore_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_mx_zscore_dloss_dindepdt(float[], float[], float[], int[2]);
drop function if exists sm_sc.fv_d_standlize_softmax_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_x_softmax_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_x_softmax_dloss_dindepdt(float[], float[], float[], int);
drop function if exists sm_sc.fv_d_standlize_x_zscore_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_x_zscore_dloss_dindepdt(float[], float[], float[], int);
drop function if exists sm_sc.fv_d_standlize_y_softmax_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_y_softmax_dloss_dindepdt(float[], float[], float[], int);
drop function if exists sm_sc.fv_d_standlize_y_zscore_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_standlize_y_zscore_dloss_dindepdt(float[], float[], float[], int);
drop function if exists sm_sc.fv_d_standlize_zscore_dloss_dindepdt(float[], float[]);
drop function if exists sm_sc.__fv_d_redistr_softmax_1d_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_d_redistr_softmax_dloss_dindepdt(float[], float[], float[], int[]);
drop function if exists sm_sc.fv_d_redistr_zscore(float[], float[], int[]);
drop function if exists sm_sc.__fv_d_redistr_softmax_1d_dloss_dindepdt(float[], float[], float[]);
drop function if exists sm_sc.fv_normalize_mx_0_1(float[]);
drop function if exists sm_sc.fv_normalize_mx_ne1_1(float[]);
drop function if exists sm_sc.fv_normalize_x3_0_1(float[]);
drop function if exists sm_sc.fv_normalize_x3_0_1(float[]);
drop function if exists sm_sc.fv_normalize_x4_0_1(float[]);
drop function if exists sm_sc.fv_normalize_x4_0_1(float[]);
drop function if exists sm_sc.fv_normalize_x_0_1(float[]);
drop function if exists sm_sc.fv_normalize_x_0_1(float[]);
drop function if exists sm_sc.fv_normalize_y_0_1(float[]);
drop function if exists sm_sc.fv_normalize_y_0_1(float[]);
drop function if exists sm_sc.fv_standlize_mx_l1l2ln(float[], float);
drop function if exists sm_sc.fv_standlize_mx_log(float[]);
drop function if exists sm_sc.fv_standlize_mx_softmax(float[]);
drop function if exists sm_sc.fv_standlize_mx_softmax(float[], int[2]);
drop function if exists sm_sc.fv_standlize_mx_zscore(float[]);
drop function if exists sm_sc.fv_standlize_mx_zscore(float[], int[2]);
drop function if exists sm_sc.fv_standlize_x3_l1l2ln(float[], float);
drop function if exists sm_sc.fv_standlize_x3_log(float[]);
drop function if exists sm_sc.fv_standlize_x4_l1l2ln(float[], float);
drop function if exists sm_sc.fv_standlize_x4_log(float[]);
drop function if exists sm_sc.fv_standlize_x_l1l2ln(float[], float);
drop function if exists sm_sc.fv_standlize_x_log(float[]);
drop function if exists sm_sc.fv_standlize_x_softmax(float[]);
drop function if exists sm_sc.fv_standlize_x_softmax(float[], int);
drop function if exists sm_sc.fv_standlize_x_zscore(float[]);
drop function if exists sm_sc.fv_standlize_x_zscore(float[], int);
drop function if exists sm_sc.fv_standlize_y_l1l2ln(float[], float);
drop function if exists sm_sc.fv_standlize_y_log(float[]);
drop function if exists sm_sc.fv_standlize_y_softmax(float[]);
drop function if exists sm_sc.fv_standlize_y_softmax(float[], int);
drop function if exists sm_sc.fv_standlize_y_zscore(float[]);
drop function if exists sm_sc.fv_standlize_y_zscore(float[], int);
drop function if exists sm_sc.fv_redistr_0_1(float[]);
drop function if exists sm_sc.fv_redistr_0_1(float[], int[]);
drop function if exists sm_sc.fv_redistr_centralize(float[]);
drop function if exists sm_sc.fv_redistr_centralize(float[], int[]);
drop function if exists sm_sc.fv_redistr_l1l2ln(float[], int);
drop function if exists sm_sc.fv_redistr_l1l2ln(float[], int, int[]);
drop function if exists sm_sc.fv_redistr_log(float[]);
drop function if exists sm_sc.fv_redistr_log(float[], int[]);
drop function if exists sm_sc.fv_redistr_ne1_1(float[]);
drop function if exists sm_sc.fv_redistr_ne1_1(float[], int[]);
drop function if exists sm_sc.fv_redistr_softmax(float[], int[]);
drop function if exists sm_sc.fv_redistr_softmax_ex(float[], int[]);
drop function if exists sm_sc.fv_redistr_zscore(float[], int[]);
drop function if exists sm_sc.ft_gradient(varchar(64)[], jsonb);
drop function if exists sm_sc.ft_gradient_graph(varchar(64), anynonarray, varchar(64));
drop function if exists sm_sc.ft_gradient_opr_graph(varchar(64), varchar(64), int, varchar(64), float, varchar(64));
drop function if exists sm_sc.ft_gradient_opr_graph(varchar(64), varchar(64), int, varchar(64)[], float[], varchar(64));
drop function if exists sm_sc.fv_gradient(varchar(64), anynonarray);
drop function if exists sm_sc.fv_gradient_jacobi(varchar(64)[], text[]);
drop function if exists sm_sc.fv_gradient_opr(float, varchar(64), int, float, float);
drop function if exists sm_sc.fv_gradient_opr(float, varchar(64), int, float, float[]);
drop function if exists sm_sc.fv_d_activate_boxcox(float[], float);
drop function if exists sm_sc.fv_d_activate_elu(float[], float);
drop function if exists sm_sc.fv_d_activate_gelu(float[]);
drop function if exists sm_sc.fv_d_activate_leaky_relu(float[], float);
drop function if exists sm_sc.fv_d_activate_relu(float[]);
drop function if exists sm_sc.fv_d_activate_selu(float[]);
drop function if exists sm_sc.fv_d_activate_sigmoid(float[], float[]);
drop function if exists sm_sc.fv_d_activate_softplus(float[]);
drop function if exists sm_sc.fv_d_activate_swish(float[], float[]);
drop function if exists sm_sc.fv_activate_boxcox(float[], float);
drop function if exists sm_sc.fv_activate_elu(float[], float);
drop function if exists sm_sc.fv_activate_gelu(float[]);
drop function if exists sm_sc.fv_activate_leaky_relu(float[], float);
drop function if exists sm_sc.fv_activate_relu(float[]);
drop function if exists sm_sc.fv_activate_selu(float[]);
drop function if exists sm_sc.fv_activate_sigmoid(anyarray);
drop function if exists sm_sc.fv_activate_softplus(float[]);
drop function if exists sm_sc.fv_activate_swish(float[]);
drop function if exists sm_sc.fv_activate_tanh(float[]);
drop function if exists sm_sc.ft_computational_graph_deserialize(jsonb);
drop function if exists sm_sc.fv_clean_bracket(text);
drop function if exists sm_sc.ft_computational_graph_deserialize(text);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_1_ex(float[][], float[][], int[2], int[4]);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_2(float[], float[], int[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_2_py(float[], float[], int[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_3(float[], int[]);
drop function if exists sm_sc.fv_d_conv_2d_grp_x_dloss_dindepdt_1(int, float[], float[], int, int[2], int[4]);
drop function if exists sm_sc.fv_d_conv_2d_grp_x_dloss_dindepdt_2(float[], int, float[], int[2], boolean, int[2], int[4], float);
drop function if exists sm_sc.fv_d_conv_add_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_add_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_de_div_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_de_div_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_de_log_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_de_log_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_de_pow_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_de_pow_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_de_prod_mx_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_de_prod_mx_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_de_sub_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_de_sub_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_div_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_div_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_log_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_log_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_mul_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_mul_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_pow_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_pow_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_prod_mx_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_prod_mx_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_conv_sub_dloss_dindepdt_1;
drop function if exists sm_sc.fv_d_conv_sub_dloss_dindepdt_2;
drop function if exists sm_sc.fv_d_pool_avg_dloss_dindepdt(int[2], float[], int[2], int[4]);
drop function if exists sm_sc.fv_d_pool_avg_dloss_dindepdt_ex(int[2], float[][], int[2], int[4]);
drop function if exists sm_sc.fv_d_pool_avg_grp_x_dloss_dindepdt(int, float[], int[2], int[2], int[4]);
drop function if exists sm_sc.fv_d_pool_max_dloss_dindepdt(float[], int[2], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_pool_max_dloss_dindepdt_ex(float[], int[2], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_pool_max_grp_x_dloss_dindepdt(float[], int, float[], int[2], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_pool_none_dloss_dindepdt;
drop function if exists sm_sc.fv_conv_2d(float[], float[], float, int[2], int[4], float);
drop function if exists sm_sc.fv_conv_2d_v_im2col_ex(float[], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_conv_2d_v_im2col_ex_ex(float[], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_1(int[2], float[][], float[][], int[2], int[4]);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_2(float[], float[], int[], int[2], int[4], float);
drop function if exists sm_sc.fv_d_conv_2d_dloss_dindepdt_2_ex(float[], float[], int[2], int[2], int[4], float);
drop function if exists sm_sc.fv_opr_pool_avg_stride_window(anyarray, int[]);
drop function if exists sm_sc.fv_opr_pool_max_stride_window(anyarray, int[]);
drop function if exists sm_sc.fv_opr_pool_none_stride_window(anyarray, int[]);
drop function if exists sm_sc.fv_conv_2d_grp_x(float[], int, float[], int, int[2], int[4], float);
drop function if exists sm_sc.fv_conv_2d_im2col_py(float[], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_conv_2d_v_im2col(float[], float[], float[], int[2], int[4], float);
drop function if exists sm_sc.fv_conv_add(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_de_div(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_de_log(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_de_pow(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_de_prod_mx(anyarray, anyarray, int, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_de_sub(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_div(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_log(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_mul(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_pow(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_prod_mx(anyarray, anyarray, int, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_conv_sub(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_opr_conv_2d_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_2d_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_add_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_add_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_div_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_div_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_log_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_log_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_pow_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_pow_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_sub_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_de_sub_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_div_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_div_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_log_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_log_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_mul_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_mul_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_pow_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_pow_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_sub_stride_1(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_conv_sub_stride_window(anyarray, anyarray);
drop function if exists sm_sc.fv_opr_pool_avg_stride_1(anyarray, int[]);
drop function if exists sm_sc.fv_opr_pool_max_stride_1(anyarray, int[]);
drop function if exists sm_sc.fv_opr_pool_none_stride_1(anyarray, int[]);
drop function if exists sm_sc.fv_pool_avg(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_avg_2d_grp_x(float[], int, int[2], int[2], int[4], float);
drop function if exists sm_sc.fv_pool_avg_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_coalesce(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_max(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_max_2d_grp_x(float[], int, int[2], int[2], int[4], float);
drop function if exists sm_sc.fv_pool_max_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_median(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_min(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_min_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_mode(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_none(anyarray, anyarray, int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_none_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_prod(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_prod_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_ptp(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_sum(anyarray, int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_pool_sum_py(float[], int[2], int[2], int[4], anyelement);
drop function if exists sm_sc.fv_lambda_parallel_by_array_slice_1_opr(anyarray, varchar(64));
drop function if exists sm_sc.fv_algebra_execute(text);
drop function if exists sm_sc.fv_algebra_execute(varchar(64), float[]);
drop function if exists sm_sc.fv_lambda_arr(bigint, varchar(64), float[], float[][], float[], float[][]);
drop function if exists sm_sc.fv_lambda_arr_ddepdt_dindepdt(bigint, varchar(64), float[], int, float[], float[], float[]);
drop function if exists sm_sc.fv_lambda_arr_ddepdt_dindepdt_p(char(6), bigint, bigint, bigint, varchar(64), varchar(64), int, varchar(64), float[], varchar(64), int[2]);
drop function if exists sm_sc.fv_lambda_arr_dloss_dindepdt(bigint, varchar(64), float[], int, float[], float[], float[], int, float[]);
drop function if exists sm_sc.fv_lambda_arr_dloss_dindepdt_p(char(6), bigint, bigint, bigint, varchar(64), varchar(64), int, varchar(64), float[], varchar(64), int, varchar(64));
drop function if exists sm_sc.fv_lambda_arr_len(bigint, varchar(64), int[], int[], float[], int[]);
drop function if exists sm_sc.fv_lambda_arr_p(char(6), bigint, bigint, bigint, varchar(64), varchar(64), varchar(64), float[], varchar(64));
drop function if exists sm_sc.fv_lambda_dloss_dz(varchar(32), float[], float[]);
drop function if exists sm_sc.fv_lambda_loss(varchar(32), float[], float[], float[], float[], float[], float[], float[], float[]);
drop function if exists sm_sc.fv_d_nn_none_dloss_dindepdt(anyarray);
drop function if exists sm_sc.fv_nn_const(anyarray);
drop function if exists __ft_cte_nn_train_back_cte_dloss_dindepdt_fore(bigint, int);
drop function if exists __ft_cte_nn_train_fore_cte_x(bigint, int, int, int);
drop function if exists sm_sc.ft_nn_buff_slice_rand(bigint, int4range[], int[]);
drop function if exists sm_sc.ft_nn_buff_slice_rand_pick(bigint, int4range[], int[]);
drop function if exists sm_sc.ft_nn_in_out(bigint, bigint, float[], float[], float[], float[], int[]);
drop function if exists sm_sc.ft_nn_in_out_p(bigint, bigint, float[], float[], float[], float[], int[]);
drop function if exists sm_sc.ft_nn_node2node_path(bigint, bigint, bigint);
drop function if exists sm_sc.fv_idx_samp_by_samp(int4multirange, int4multirange);
drop function if exists sm_sc.fv_idx_samp_by_samp(int4multirange[], int4multirange);
drop function if exists sm_sc.fv_nn_node2node_val(bigint, bigint, bigint);
drop function if exists sm_sc.fv_nn_node_pick_depdt_idx(varchar(64), int4multirange, float[]);
drop function if exists sm_sc.fv_nn_none(anyarray);
drop function if exists sm_sc.fv_nn_weight_len(varchar(64), int, float[], int[]);
drop function if exists sm_sc.ft_bpe(text[], int, int, int, int, intboolean);
drop function if exists sm_sc.ft_onehot_dic(anyarray, float, float);
drop function if exists sm_sc.fv_huffman(float[]);
drop function if exists sm_sc.fv_onehot(anyarray, float, float);
drop function if exists sm_sc.fv_dloss_dz_cross_entropy(float[], float[]);
drop function if exists sm_sc.fv_dloss_dz_cross_entropy_true_onehot_idx(float[], float[]);
drop function if exists sm_sc.fv_dloss_dz_least_square(float[], float[]);
drop function if exists sm_sc.fv_loss_cross_entropy(float[], float[]);
drop function if exists sm_sc.fv_loss_cross_entropy_true_onehot_idx(float[], float[]);
drop function if exists sm_sc.fv_loss_least_square(float[], float[]);
drop function if exists sm_sc.fv_cos(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_add(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_ceil(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.fv_opr_ceil(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_conjugate(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_conjugate_45(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_div(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_div(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_exp(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_floor(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.fv_opr_floor(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_imaginary(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_ln(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_log(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_mul(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_norm(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_norm(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_pow(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_real(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_round(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.fv_opr_round(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_sub(sm_sc.typ_l_complex, sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_sub(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_opr_trunc(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.fv_opr_trunc(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_sin(sm_sc.typ_l_complex);
drop function if exists public.abs(sm_sc.typ_l_complex);
drop function if exists abs(sm_sc.typ_l_complex);
drop function if exists public.ceil(sm_sc.typ_l_complex, int);
drop function if exists public.ceil(sm_sc.typ_l_complex);
drop function if exists public.exp(sm_sc.typ_l_complex);
drop function if exists public.floor(sm_sc.typ_l_complex, int);
drop function if exists public.floor(sm_sc.typ_l_complex);
drop function if exists public.round(sm_sc.typ_l_complex, int);
drop function if exists public.round(sm_sc.typ_l_complex);
drop function if exists public.trunc(sm_sc.typ_l_complex, int);
drop function if exists public.trunc(sm_sc.typ_l_complex);
drop function if exists sm_sc.abs(sm_sc.typ_l_complex);
drop function if exists abs(sm_sc.typ_l_complex);
drop function if exists sm_sc.ceil(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.ceil(sm_sc.typ_l_complex);
drop function if exists sm_sc.exp(sm_sc.typ_l_complex);
drop function if exists sm_sc.floor(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.floor(sm_sc.typ_l_complex);
drop function if exists sm_sc.round(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.round(sm_sc.typ_l_complex);
drop function if exists sm_sc.trunc(sm_sc.typ_l_complex, int);
drop function if exists sm_sc.trunc(sm_sc.typ_l_complex);
drop function if exists sm_sc.fv_l_complex_add_ex;
drop function if exists sm_sc.__fv_mx_avg_final(sm_sc.__typ_l_complex_ex);
drop function if exists sm_sc.fv_coalesce_ex(anyelement, anyelement);
drop function if exists sm_sc.__fv_concat_ex(anyelement, anyelement);
drop function if exists sm_sc.__fv_prod_ex(anyelement, anyelement);
drop function if exists sm_sc.__fv_range_and_ex(anymultirange, anymultirange);
drop function if exists sm_sc.__fv_range_and_ex(anyrange, anyrange);
drop function if exists sm_sc.__fv_range_arr_and(anyarray, anyarray);
drop function if exists sm_sc.__fv_range_arr_and(anyarray, anyelement);
drop function if exists sm_sc.__fv_range_arr_and(anyelement, anyarray);
drop function if exists sm_sc.__fv_range_or_ex(anymultirange, anymultirange);
drop function if exists sm_sc.__fv_range_or_ex(anyrange, anyrange);
drop function if exists sm_sc.__fv_range_arr_or(anyarray, anyarray);
drop function if exists sm_sc.__fv_range_arr_or(anyarray, anyelement);
drop function if exists sm_sc.__fv_range_arr_or(anyelement, anyarray);
drop function if exists sm_sc.ft_regexp_matches(text, text, text);
drop function if exists sm_sc.fv_enum_rand(varchar(64), int);
drop function if exists sm_sc.fv_enum_rand_pick(varchar(64), int);
drop function if exists sm_sc.fv_get_global_seq();
drop function if exists sm_sc.fv_get_global_seq(bigint);
drop function if exists sm_sc.fv_multirange_len(anymultirange);
drop function if exists sm_sc.fv_multirange_move(anymultirange, anyelement);
drop function if exists sm_sc.fv_o_distance(float[2][], int);
drop function if exists sm_sc.fv_o_distance(float[], float[], int);
drop function if exists sm_sc.fv_range_move(anyrange, anyelement);
drop function if exists sm_sc.fv_regexp_matches_strs_once(text, text, text);
drop function if exists sm_sc.__fv_delete_kv(varchar(64)[]);
drop function if exists sm_sc.__fv_get_kv(varchar(64), boolean);
drop function if exists sm_sc.__fv_get_kvs(varchar(64)[], boolean);
drop function if exists sm_sc.__fv_set_kv(float[], varchar(64));
drop function if exists sm_sc.__fv_set_kvs(float[], varchar(64)[]);
drop function if exists sm_sc.ft_mx_evd(float[][]);
drop function if exists sm_sc.ft_mx_lu(float[][]);
drop function if exists sm_sc.ft_mx_qr(float[][]);
drop function if exists sm_sc.ft_mx_svd(float[][]);
drop function if exists sm_sc.fv_arr_norm_1(float[]);
drop function if exists sm_sc.fv_arr_norm_2(float[]);
drop function if exists sm_sc.fv_arr_norm_nega_inf(float[]);
drop function if exists sm_sc.fv_arr_norm_p(float[], int);
drop function if exists sm_sc.fv_arr_norm_posi_inf(float[]);
drop function if exists sm_sc.fv_mx_col_mix(float[][], int, int, int);
drop function if exists sm_sc.fv_mx_determinant(float[][]);
drop function if exists sm_sc.fv_mx_evd_value(float[][]);
drop function if exists sm_sc.fv_mx_inversion(float[][]);
drop function if exists sm_sc.fv_mx_is_symmetry(float[][]);
drop function if exists sm_sc.fv_mx_max_abs_evd_value(float[][]);
drop function if exists sm_sc.fv_mx_min_abs_evd_value(float[][]);
drop function if exists sm_sc.fv_mx_norm_col(float[][]);
drop function if exists sm_sc.fv_mx_norm_eigenvalue(float[][]);
drop function if exists sm_sc.fv_mx_norm_inf(float[][]);
drop function if exists sm_sc.fv_mx_norm_l0(float[][]);
drop function if exists sm_sc.fv_mx_norm_l1(float[][]);
drop function if exists sm_sc.fv_mx_norm_l21(float[][]);
drop function if exists sm_sc.fv_mx_norm_l2_f(float[][]);
drop function if exists sm_sc.fv_mx_rank(float[][]);
drop function if exists sm_sc.fv_mx_reorder_col(float[][], int[]);
drop function if exists sm_sc.fv_mx_reorder_row(float[][], int[]);
drop function if exists sm_sc.fv_mx_rows_step_simple(float[][]);
drop function if exists sm_sc.fv_mx_row_mix(float[][], int, int, int);
drop function if exists sm_sc.fv_mx_row_step(float[][]);
drop function if exists sm_sc.fv_mx_times_col(float[][], int, float);
drop function if exists sm_sc.fv_mx_times_row(float[][], int, float);
drop function if exists sm_sc.ufv_prod_mx_based_org_chunk(float[], float[], int, float[]);
drop function if exists sm_sc.ufv_prod_mx_slice(float[], float[]);
drop function if exists sm_sc.ufv_d_query_by_width_row_idx_from_col_dloss_dindepdt_1(float[], int[], int[]);
drop function if exists sm_sc.ufv_query_by_width_row_idx_from_col(float[], int[]);
drop function if exists sm_sc.ufv_d_query_by_heigh_col_idx_from_row_dloss_dindepdt_1(float[], int[], int[]);
drop function if exists sm_sc.ufv_query_by_heigh_col_idx_from_row(float[], int[]);
drop function if exists sm_sc.ufv_lambda_arr(bigint, varchar(64), float[], float[][], float[], float[][]);
drop function if exists sm_sc.ufv_lambda_arr_ddepdt_dindepdt(bigint, varchar(64), float[], int, float[], float[], float[]);
drop function if exists sm_sc.ufv_lambda_arr_dloss_dindepdt(bigint, varchar(64), float[], int, float[], float[], float[], int, float[]);
drop function if exists sm_sc.ufv_lambda_arr_len(bigint, varchar(64), int[], int[], float[], int[]);
drop function if exists sm_sc.ufv_upd_att_ffn_chunk(bigint, bigint, int, int);
drop function if exists sm_sc.ufv_upd_att_qkv_chunk(bigint, bigint, int, int, int, int);
drop function if exists sm_sc.ufv_combine_att_ffn(int, int, float, int);
drop function if exists sm_sc.ufv_combine_att_ffn_chunk(int, int, float, int);
drop function if exists sm_sc.ufv_combine_att_qkv(int, int, int, int, int, boolean);
drop function if exists sm_sc.ufv_combine_att_qkv_chunk(int, int, int, int, int, boolean);
drop function if exists sm_sc.ufv_combine_att_qkv_ngram(int, int, int, int, boolean, int);
drop function if exists sm_sc.ufv_combine_att_seg4d_symm_ngram_pos_1head(int, int, int, int, int, int[], int);
drop function if exists sm_sc.ufv_combine_att_tar_fn(int, int, int, int);
drop function if exists sm_sc.ufv_combine_ngram_4_att_kv(int, int, int);
drop function if exists sm_sc.ufv_combine_ngram_4_att_kv_bi_seq(int, int, int);

-- drop type
drop type if exists typ_arr_point;
drop type if exists typ_arr_point_cube;
drop type if exists sm_sc.typ_l_complex;
drop type if exists sm_sc.__typ_cte_dloss_dindepdt_fore;
drop type if exists sm_sc.__typ_cte_x;
drop type if exists sm_sc.__typ_array_ex;
drop type if exists sm_sc.__typ_arr_float_ex;
drop type if exists sm_sc.__typ_l_complex_ex;
drop type if exists sm_sc.typ_l_nn_arr;
drop type if exists sm_sc.__typ_arr_cpx_ex;
drop type if exists cls_mx_eigen_return;
drop type if exists cls_mx_qr_return;